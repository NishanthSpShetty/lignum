// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/lignum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LignumClient is the client API for Lignum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LignumClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ok, error)
	Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Messages, error)
	CreateTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Ok, error)
	ListTopic(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error)
}

type lignumClient struct {
	cc grpc.ClientConnInterface
}

func NewLignumClient(cc grpc.ClientConnInterface) LignumClient {
	return &lignumClient{cc}
}

func (c *lignumClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/proto.Lignum/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lignumClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.Lignum/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lignumClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.Lignum/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lignumClient) Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/proto.Lignum/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lignumClient) CreateTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/proto.Lignum/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lignumClient) ListTopic(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error) {
	out := new(ListTopicResponse)
	err := c.cc.Invoke(ctx, "/proto.Lignum/ListTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LignumServer is the server API for Lignum service.
// All implementations must embed UnimplementedLignumServer
// for forward compatibility
type LignumServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Send(context.Context, *Message) (*Ok, error)
	Read(context.Context, *Query) (*Messages, error)
	CreateTopic(context.Context, *Topic) (*Ok, error)
	ListTopic(context.Context, *ListTopicRequest) (*ListTopicResponse, error)
	mustEmbedUnimplementedLignumServer()
}

// UnimplementedLignumServer must be embedded to have forward compatible implementations.
type UnimplementedLignumServer struct {
}

func (UnimplementedLignumServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedLignumServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLignumServer) Send(context.Context, *Message) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedLignumServer) Read(context.Context, *Query) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedLignumServer) CreateTopic(context.Context, *Topic) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedLignumServer) ListTopic(context.Context, *ListTopicRequest) (*ListTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopic not implemented")
}
func (UnimplementedLignumServer) mustEmbedUnimplementedLignumServer() {}

// UnsafeLignumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LignumServer will
// result in compilation errors.
type UnsafeLignumServer interface {
	mustEmbedUnimplementedLignumServer()
}

func RegisterLignumServer(s grpc.ServiceRegistrar, srv LignumServer) {
	s.RegisterService(&Lignum_ServiceDesc, srv)
}

func _Lignum_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lignum_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lignum_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lignum_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).Read(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lignum_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).CreateTopic(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lignum_ListTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LignumServer).ListTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Lignum/ListTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LignumServer).ListTopic(ctx, req.(*ListTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lignum_ServiceDesc is the grpc.ServiceDesc for Lignum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lignum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Lignum",
	HandlerType: (*LignumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Lignum_Echo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Lignum_Ping_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Lignum_Send_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Lignum_Read_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Lignum_CreateTopic_Handler,
		},
		{
			MethodName: "ListTopic",
			Handler:    _Lignum_ListTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lignum.proto",
}
